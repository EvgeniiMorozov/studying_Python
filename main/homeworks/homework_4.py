# Морозов Е.И. группа: Python026

import random


# Задача 1.

# По длинам трех отрезков, введенных пользователем, определить возможность существования
# треугольника, составленного из этих отрезков. Если такой треугольник существует, то
# определить, является ли он разносторонним, равнобедренным или равносторонним.


"""
Условие существования треугольника:
Треугольник существует только тогда, когда сумма любых двух его сторон больше третьей.
Требуется сравнить каждую сторону с суммой двух других.
Если хотя бы в одном случае сторона окажется больше или равна сумме двух других,
то треугольника с такими сторонами не существует.

Если треугольник существует и:
- все три стороны равны, то треугольник равносторонний;
- все три стороны разные, то треугольник разносторонний;
- две его стороны равны, то треугольник равнобедренный;
- выполняется условие теоремы Пифагора, то треугольник прямоугольный.

Для лучшей читаемости кода сделаем:
- Проверки на равнобедренность check_isosceles(a, b, c) и соответствие
  теореме Пифагора check_pythagoras(a, b, c) сделаем отдельными функциями,
  возвращающими нам True или False и будем их вызывать внутри основновной
  функции.
- Проверку на существование треугольника сделаем путем проверки на
  несоответствие, просто чтоб удобнее было читать вложенный код.
"""


def is_triangle(side1, side2, side3):
    # Проверяем, существует ли вообще такой треугольник.
    if (side1 + side2 <= side3 and side1 + side3 <= side2
            and side2 + side3 <= side1):
        print('\nТреугольника с такими сторонами не существует!')

    else:  # Проверки на различные типы треугольников.

        # Проверка на равные стороны.
        if side1 == side2 and side2 == side3 and side1 == side3:
            print('\nТреугольник равносторонний.')

        # Проверка на равнобедренность.
        elif check_isosceles(side1, side2, side3):
            print('\nТреугольник равнобедренный.')

        # Проверка на соответсвие теореме Пифагора.
        elif check_pythagoras(side1, side2, side3):
            print('\nТреугольник прямоугольный.')

        # Значит треугольник разносторонний.
        else:
            print('\nТреугольник разносторонний.')


# Проверка на выполнение теоремы Пифагора.
def check_pythagoras(a, b, c):
    lst = [a, b, c]
    hyp = max(lst)  # гипотенуза
    lst.remove(hyp)
    return True if hyp**2 == lst[0]**2 + lst[1]**2 else False


# Проверка на равнобедренность треугольника.
def check_isosceles(a, b, c):
    return True if a == b or b == c or c == a else False


# Задача 2.

# Переставить элементы заданного массива в обратном порядке, то есть произвести реверс массива.

# Сразу на вскидку приходит 3 способа: с помощью list.reverse(),
# с помощью среза списка и с помощью цикла for.

# Способ 1. С помощью метода list.reverse().
def reverse_arr(arr):
    arr.reverse()
    return arr


# Способ 2. С помощью среза списка (требуется взять шаг среза -1).
# Этот способ, мне нравится больше всех остальных.
def reverse_arr_1(arr):
    return arr[::-1]


# Способ 3. С помощью цикла for.
# Этот способ, в данной задаче я считаю неоправданным, так как он требует
# создания новой переменной, занимает несколько строчек кода, но он даёт
# понять, как устроены первые два способа "под капотом".
def reverse_arr_2(arr):
    new_arr = []
    for i in reversed(range(len(arr))):
        new_arr.append(arr[i])
    return new_arr


# Вводятся строки. Определить самую длинную строку и вывести ее номер на
# экран. Если самых длинных строк несколько, то вывести номера всех таких строк.
def get_pos_maxlen_strings(lst):
    max_string = max(lst)
    counter = lst.count(max_string)
    print('Список: ', lst)
    print(f'Строка максимальной длины: {max_string}')
    if counter == 1:
        print(f'Не повторяется и находится в списке под номером {lst.index(max_string)}')
    else:
        index_list = []
        for i in range(len(lst)):
            if max_string == lst[i]:
                index_list.append(i)
        print(f'Повторов: {counter}')
        print(f'Находится в списке под номерами: {index_list}')


# Функция-генератор списка строк (понадобится для проверки).
def list_of_strings_gen(n, m):
    lst = []
    for _ in range(n):
        lst.append(random.randint(1, m) * '#')
    return lst


def main():
    # Задача 1.
    # side1 = float(input('Введите 1 сторону треугольника: '))
    # side2 = float(input('Введите 2 сторону треугольника: '))
    # side3 = float(input('Введите 3 сторону треугольника: '))
    # is_triangle(side1, side2, side3)
    # Для проверки прямоугольного треугольника, можно ввести 3, 4, 5.

    # Задача 2.
    # arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
    # print(reverse_arr(arr))
    # print(reverse_arr_1(arr))
    # print(reverse_arr_2(arr))

    # Задача 3.
    rand_list = list_of_strings_gen(10, 10)
    get_pos_maxlen_strings(rand_list)
    # pass


if __name__ == '__main__':
    main()
